import org.apache.tools.ant.util.LazyFileOutputStream
import org.apache.tools.ant.util.OutputStreamFunneler

import java.nio.file.Files
import java.nio.file.Paths
import java.util.regex.Pattern

import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id "java"
    id "idea"
    id "com.adarshr.test-logger" version "3.2.0"
    id "de.undercouch.download" version "5.3.1"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

// ===========================================================================
// plugin info
// ===========================================================================
group                      'co.elastic.logstash.plugins.filter.elasticintegration' // must match the package of the main plugin class
version                    "${file("VERSION").text.trim()}" // read from required VERSION file
description                = "Elastic Integration filter"
// ===========================================================================

java {
    sourceCompatibility = 17
    targetCompatibility = 17
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

configurations {
    logstashCore
    elasticsearchMinimalCore
    elasticsearchClient

    implementation.extendsFrom(logstashCore, elasticsearchMinimalCore, elasticsearchClient)
}

wrapper {
    gradleVersion = '7.5.1'
    distributionUrl = distributionUrl.replace("bin", "all")
}

shadowJar {
    configurations = [project.configurations.elasticsearchMinimalCore,
                      project.configurations.elasticsearchClient]
    classifier = null
    zip64 true
}

dependencies {
    elasticsearchClient 'co.elastic.clients:elasticsearch-java:8.6.1'
    elasticsearchMinimalCore fileTree(dir: 'local_libs', include: ["*.jar"])

    // Logstash core and its known-provided and required dependencies
    // must NEVER be included in the gem-vendored jars
    logstashCore files(objects.fileCollection(), {
        from requiredLogstashCoreJar("logstash-core")
        from requiredLogstashCoreJar("log4j-api")
        from requiredLogstashVendorJar("jruby/lib", "jruby")
    })

    // Logstash core-provided dependencies that are also used directly
    // by this plugin's implementation and SHOULD be gem-vendored
    // once they can be safely shaded
    logstashCore files(objects.fileCollection(), {
        from requiredLogstashCoreJar("jackson-core")
        from requiredLogstashCoreJar("jackson-databind")
        from requiredLogstashCoreJar("jackson-annotations")
        from requiredLogstashCoreJar("guava", "jre")
    })

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.1.1'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation "com.github.seregamorph:hamcrest-more-matchers:0.1"
    testImplementation "com.github.tomakehurst:wiremock-jre8:2.35.0"
    testRuntimeOnly requiredLogstashCoreJar("log4j-core")
}

/**
 * @param packageNameSpec e.g., "package-name" or "nesting/path/package-name"
 * @return a {@code Closure<Boolean>} determines if the provided {@code FileTreeElement}
 *         is a package matching the {@code packageNameSpec} or a nesting that _could_ include it.
 */
def jarPackageNamed(String packageNameSpec, String packageFlavorSpec = null) {
    def packageNamePath = Paths.get(packageNameSpec)
    def packageName = packageNamePath.fileName.toString()
    def packageNesting = packageNamePath.parent
    def packagePattern = namedPackageWithAnyVersionPattern(packageName, packageFlavorSpec, "jar")

    return { FileTreeElement element ->
        if (packageNesting != null && packageNesting.startsWith(element.relativePath.toString())) { return true }
        if (packageNesting == null && element.relativePath.toString() != element.name) { return false }

        return element.name.matches(packagePattern)
    }
}

def namedPackageWithAnyVersionPattern(String packageName, String packageFlavorSpec = null, String suffix = null) {
    def escapedPackagePart = Pattern.quote(packageName)
    def optionalAnyVersionPart = "(?:-\\d+(?:\\.\\d+)*(?i:-SNAPSHOT(?:-[0-9A-F]+)?)?)?"
    def escapedFlavorPart = packageFlavorSpec == null ? "" : "(?:-${Pattern.quote(packageFlavorSpec)})"
    def escapedSuffixPart = suffix == null ? "" : Pattern.quote(".${suffix}")
    return Pattern.compile("${escapedPackagePart}${optionalAnyVersionPart}${escapedFlavorPart}${escapedSuffixPart}");
}

def envOrPropertyValue(String name) {
    return System.getenv(name) ? System.getenv(name) : project.findProperty(name)
}

def requiredLogstashCoreJar(jarSpec, flavorSpec = null) {
    _requiredLogstashJar("logstash-core/lib/jars", jarSpec, flavorSpec)
}

def requiredLogstashVendorJar(path, jarSpec) {
    _requiredLogstashJar("vendor/${path}", jarSpec)
}

def _requiredLogstashJar(pathPrefix, jarSpec, flavorSpec = null) {
    def logstashPath = envOrPropertyValue("LOGSTASH_PATH")
    assert logstashPath != null : "The property LOGSTASH_PATH must be defined, and be path to logstash directory"
    file("${LOGSTASH_PATH}").with { logstashDir ->
        assert logstashDir.exists() : "LOGSTASH_PATH does not exist: ${logstashDir}"
        assert logstashDir.directory : "LOGSTASH_PATH is not a direcrtory: ${logstashDir}"
        file("${logstashDir.path}/${pathPrefix}/").with { jarSourceDir ->
            fileTree(jarSourceDir) { include jarPackageNamed(jarSpec, flavorSpec) }.tap { jarSource ->
                assert !jarSource.empty : "LOGSTASH_PATH's ${pathPrefix} does not provide any ${jarSpec} jars: ${jarSourceDir}"
                assert jarSource.files.size() == 1 : "LOGSTASH_PATH's ${pathPrefix} provides multiple ${jarSpec} jars: ${jarSource.files}"
            }
        }
    }
}

task downloadElasticsearchSourceZip(type: Download) {
    def esTreeish = envOrPropertyValue("ELASTICSEARCH_TREEISH")
    inputs.property("ELASTICSEARCH_TREEISH", esTreeish)

    if (!esTreeish) {
        throw new StopActionException("""
            The property ELASTICSEARCH_TREEISH must be defined, and be a tree-ish (branch, commit hash, or tag)
            available on the github repository for elastic/elasticsearch (e.g., `v8.7.0`, `8.7`, `main`, `ff1caebad1dea`)
        """)
    }

    src "https://github.com/elastic/elasticsearch/archive/refs/heads/${esTreeish}.zip"
    dest "${buildDir}/elasticsearch-source.zip"
    onlyIfModified true
    useETag "all"
}
task unzipDownloadedElasticsearchSourceZip(dependsOn: downloadElasticsearchSourceZip, type: Copy) {
    description "extracts Elasticsearch source from a downloaded zip file"

    from zipTree(downloadElasticsearchSourceZip.dest)
    into "${buildDir}/elasticsearch-source/"
    eachFile {
        // strip top-level directory
        path = path.replaceFirst(/^.+?\//, "")
    }
}

task buildElasticsearchLocalDistro(dependsOn: unzipDownloadedElasticsearchSourceZip, type: Exec) {
    description "builds Elasticsearch localDistro"

    def logFile = project.file("${buildDir}/elasticsearch-build.log")
    doFirst {
        def funneler = new OutputStreamFunneler(new LazyFileOutputStream(logFile))
        standardOutput = funneler.funnelInstance
        errorOutput = funneler.funnelInstance
    }

    workingDir "${buildDir}/elasticsearch-source/"
    commandLine "./gradlew", "localDistro"

    ignoreExitValue true // handled in doLast
    doLast {
        def exitValue = executionResult.get().exitValue
        assert exitValue == 0 : "Elasticsearch build failed; logs available in ${logFile.path}"
    }
}

task importMinimalElasticsearch(dependsOn: buildElasticsearchLocalDistro) {
    description "Imports minimal portions of Elasticsearch localDistro"

    def buildDestination = file("${buildDir}/elasticsearch-source/build/distribution/local/")

    inputs.dir(buildDestination)
    outputs.dir project.file("local_libs")

    doLast {
        def buildLocationCandidates = buildDestination.listFiles({ it.isDirectory() && it.name.matches(namedPackageWithAnyVersionPattern("elasticsearch")) } as FileFilter)
        if (buildLocationCandidates.length.equals(0)) { throw new StopActionException("No local ES build in ${buildDestination.toPath()}") }
        if (buildLocationCandidates.length > 1) { throw new StopActionException("Multiple local ES builds in ${buildDestination.toPath()}")}

        def elasticsearchBuildTree = buildLocationCandidates.first()

        copy {
            from("${elasticsearchBuildTree}/lib/") {
                include jarPackageNamed("elasticsearch")
                include jarPackageNamed("elasticsearch-core")
                include jarPackageNamed("elasticsearch-x-content")
                include jarPackageNamed("lucene-core")
            }

            from("${elasticsearchBuildTree}/modules/ingest-common") {
                include jarPackageNamed("ingest-common")
                include jarPackageNamed("elasticsearch-grok")
                include jarPackageNamed("elasticsearch-dissect")
            }

            from("${elasticsearchBuildTree}/modules/ingest-user-agent") {
                include jarPackageNamed("ingest-user-agent")
            }

            from("${elasticsearchBuildTree}/modules/lang-mustache") {
                include jarPackageNamed("lang-mustache")
                include jarPackageNamed("compiler")
            }

            from("${elasticsearchBuildTree}/modules/lang-painless") {
                include jarPackageNamed("lang-painless")
                include jarPackageNamed("antlr4-runtime")
                include jarPackageNamed("asm-util")
                include jarPackageNamed("asm-commons")
                include jarPackageNamed("asm-tree")
                include jarPackageNamed("asm")
                include jarPackageNamed("spi/elasticsearch-scripting-painless-spi")
            }

            into project.file('local_libs')

            includeEmptyDirs(false)
            eachFile { path = name } // flatten
            eachFile { logger.debug "copying ${it} to local_libs" }
        }
    }
}
compileJava.dependsOn(importMinimalElasticsearch)
shadowJar.dependsOn(importMinimalElasticsearch)

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task generateGemJarRequiresFile() {
    description "Generates a ruby script for runtime-requiring vendored jars"

    def jarRequiresFile = file("${projectDir}/lib/logstash/filters/elastic_integration/jar_dependencies.rb")
    outputs.file(jarRequiresFile)
    inputs.files(tasks.shadowJar)

    doLast {
        jarRequiresFile.parentFile.mkdirs()
        jarRequiresFile.withWriter { w ->
            w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
            w << "require \'jar_dependencies\'\n"
            w << "require_jar(\'${project.group}\', \'${project.name}\', \'${project.version}\')\n"
        }
    }
}

test {
    useJUnitPlatform()
}

task generateTestCertificates(type: Exec) {
    def sslTestCertsDir = "${projectDir}/src/test/resources/co/elastic/logstash/filters/elasticintegration/ssl-test-certs"

    workingDir sslTestCertsDir
    commandLine './generate.sh'

    def commonOutputFile = Paths.get("${buildDir}/generateTestCertificates.log")
    file(commonOutputFile.parent).mkdirs()
    def commonOutputStream = Files.newOutputStream(commonOutputFile)

    standardOutput = commonOutputStream
    errorOutput = commonOutputStream

    inputs.file("${sslTestCertsDir}/generate.sh")
    inputs.file("${sslTestCertsDir}/openssl.cnf")

    outputs.dir("${sslTestCertsDir}/generated")
    outputs.file(commonOutputFile)
}
processTestResources.dependsOn(generateTestCertificates)

tasks.withType(Test) {
    // Add Exports to enable tests to run in JDK17
    jvmArgs = [
            "--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
            "--add-opens=java.base/java.lang=ALL-UNNAMED",
            "--add-opens=java.base/java.util=ALL-UNNAMED"
    ]
}

task vendorShadowJar(dependsOn: shadowJar) {
    description "vendors jar dependencies"

    String vendorPathPrefix = "vendor/jar-dependencies"
    String projectGroupPath = project.group.replaceAll('\\.', '/')
    File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/${project.name}/${project.version}/${project.name}-${project.version}.jar")

    inputs.file("${buildDir}/libs/${project.name}-${project.version}.jar")
    outputs.file(projectJarFile.toPath())

    doLast {
        projectJarFile.mkdirs()
        Files.copy(file("${buildDir}/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
    }
}

task vendor {
    description "vendors dependencies and generates the ruby code to require them"

    dependsOn vendorShadowJar
    dependsOn generateGemJarRequiresFile
    generateGemJarRequiresFile.mustRunAfter vendorShadowJar
}

clean {
    delete "${projectDir}/*.gem"
}