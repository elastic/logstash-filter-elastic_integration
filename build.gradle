import java.nio.file.Files
import java.nio.file.Paths
import java.util.regex.Pattern

import static java.nio.file.StandardCopyOption.REPLACE_EXISTING

buildscript {
    repositories {
        mavenCentral()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id "java"
    id "idea"
    id "com.adarshr.test-logger" version "3.2.0"
    id "de.undercouch.download" version "5.3.1"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

// ===========================================================================
// plugin info
// ===========================================================================
group                      'co.elastic.logstash.plugins.filter.elasticintegration' // must match the package of the main plugin class
version                    "${file("VERSION").text.trim()}" // read from required VERSION file
description                = "Elastic Integration filter"
// ===========================================================================

java {
    sourceCompatibility = 17
    targetCompatibility = 17
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

configurations {
    logstashCore
    elasticsearchCore
    elasticsearchClient

    implementation.extendsFrom(logstashCore, elasticsearchCore, elasticsearchClient)
}

wrapper {
    gradleVersion = '7.5.1'
    distributionUrl = distributionUrl.replace("bin", "all")
}

//apply plugin: 'com.github.johnrengelman.shadow'
shadowJar {
    configurations = [project.configurations.elasticsearchCore,
                      project.configurations.elasticsearchClient]
    classifier = null
    zip64 true
}

dependencies {
    elasticsearchClient 'co.elastic.clients:elasticsearch-java:8.6.1'
    elasticsearchCore fileTree(dir: 'local_libs', include: ["*.jar"])

    // Logstash core and its known-provided dependencies
    logstashCore fileTree(dir: getLogstashCorePath(), include: "build/libs/logstash-core.jar")
    logstashCore 'org.apache.logging.log4j:log4j-api:2.19.0'
    logstashCore 'org.apache.logging.log4j:log4j-core:2.19.0'
    logstashCore "com.fasterxml.jackson.core:jackson-core:2.14.1"
    logstashCore "com.fasterxml.jackson.core:jackson-databind:2.14.1"
    logstashCore "com.fasterxml.jackson.core:jackson-annotations:2.14.1"
    logstashCore "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.1"
    logstashCore "com.google.guava:guava:30.1-jre"
    logstashCore 'org.jruby:jruby-complete:9.3.9.0'

    // Actual test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.1.1'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
    testImplementation "com.github.seregamorph:hamcrest-more-matchers:0.1"
    testImplementation "com.github.tomakehurst:wiremock-jre8:2.35.0"
}

/**
 * @param packageNameSpec e.g., "package-name" or "nesting/path/package-name"
 * @return a {@code Closure<Boolean>} determines if the provided {@code FileTreeElement}
 *         is a package matching the {@code packageNameSpec} or a nesting that _could_ include it.
 */
def jarPackageNamed(String packageNameSpec) {
    def packageNamePath = Paths.get(packageNameSpec)
    def packageName = packageNamePath.fileName.toString()
    def packageNesting = packageNamePath.parent
    def packagePattern = namedPackageWithAnyVersionPattern(packageName, "jar")

    return { FileTreeElement element ->
        if (packageNesting != null && packageNesting.startsWith(element.relativePath.toString())) { return true }
        if (packageNesting == null && element.relativePath.toString() != element.name) { return false }

        return element.name.matches(packagePattern)
    }
}

def namedPackageWithAnyVersionPattern(String packageName, String suffix = null) {
    def escapedPackagePart = Pattern.quote(packageName)
    def optionalAnyVersionPart = "(?:-\\d+(?:\\.\\d+)*(?i:-SNAPSHOT(?:-[0-9A-F]+)?)?)?"
    def escapedSuffixPart = suffix == null ? "" : Pattern.quote(".${suffix}")
    return Pattern.compile("${escapedPackagePart}${optionalAnyVersionPart}${escapedSuffixPart}");
}

def getLogstashCorePath() {
    System.out.println("Logstash from system env: " + System.getenv('LOGSTASH_PATH'))
    System.out.println("Logstash from gradle properties: " + LOGSTASH_CORE_PATH)

    def logstashCorePath = System.getenv('LOGSTASH_PATH')
            ? System.getenv('LOGSTASH_PATH').concat("/logstash-core")
            : LOGSTASH_CORE_PATH

    def files = ('ls -l'.concat(logstashCorePath)).execute().text
    files.eachLine{ file ->
        System.out.println("File: " + file)
    }

    return logstashCorePath
}

task downloadElasticsearchSourceZip(type: Download) {
    inputs.property("ELASTICSEARCH_TREEISH", project.findProperty("ELASTICSEARCH_TREEISH"))

    if (!project.hasProperty("ELASTICSEARCH_TREEISH")) {
        throw new StopActionException(""""
                The property ELASTICSEARCH_TREEISH must be defined, and be a tree-ish (branch, commit hash, or tag)
                available on the github repository for elastic/elasticsearch (e.g., `v8.7.0`, `8.7`, `main`)
            """)
    }

    src "https://github.com/elastic/elasticsearch/archive/refs/heads/${ELASTICSEARCH_TREEISH}.zip"
    dest "${buildDir}/elasticsearch-source.zip"
    onlyIfModified true
    useETag "all"
}
task unzipDownloadedElasticsearchSourceZip(dependsOn: downloadElasticsearchSourceZip, type: Copy) {
    description "extracts Elasticsearch source from a downloaded zip file"

    from zipTree(downloadElasticsearchSourceZip.dest)
    into "${buildDir}/elasticsearch-source/"
    eachFile {
        // strip top-level directory
        path = path.replaceFirst(/^.+?\//, "")
    }
}
task buildElasticsearchLocalDistro(dependsOn: unzipDownloadedElasticsearchSourceZip, type: Exec) {
    description "builds Elasticsearch localDistro"
    workingDir "${buildDir}/elasticsearch-source/"
    commandLine "./gradlew", "localDistro"

    standardOutput = new ByteArrayOutputStream()

    //extension method buildElasticsearchLocalDistro.output() can be used to obtain the output:
    outputs.dir("${buildDir}/elasticsearch-source/build/distribution/local/")
}

task importMinimalElasticsearch(dependsOn: buildElasticsearchLocalDistro) {
    description "Imports minimal portions of Elasticsearch localDistro"

    outputs.dir project.file("local_libs")

    doLast {
        def buildDestination = file("${buildDir}/elasticsearch-source/build/distribution/local/")

        def buildLocationCandidates = buildDestination.listFiles({ it.isDirectory() && it.name.matches(namedPackageWithAnyVersionPattern("elasticsearch")) } as FileFilter)
        if (buildLocationCandidates.length.equals(0)) { throw new StopActionException("No local ES build in ${buildDestination.toPath()}") }
        if (buildLocationCandidates.length > 1) { throw new StopActionException("Multiple local ES builds in ${buildDestination.toPath()}")}

        def elasticsearchBuildTree = buildLocationCandidates.first()

        copy {
            from("${elasticsearchBuildTree}/lib/") {
                include jarPackageNamed("elasticsearch")
                include jarPackageNamed("elasticsearch-core")
                include jarPackageNamed("elasticsearch-x-content")
                include jarPackageNamed("lucene-core")
            }

            from("${elasticsearchBuildTree}/modules/ingest-common") {
                include jarPackageNamed("ingest-common")
                include jarPackageNamed("elasticsearch-grok")
                include jarPackageNamed("elasticsearch-dissect")
                include jarPackageNamed("elasticsearch-grok")
            }

            from("${elasticsearchBuildTree}/modules/ingest-user-agent") {
                include jarPackageNamed("ingest-user-agent")
            }

            from("${elasticsearchBuildTree}/modules/lang-mustache") {
                include jarPackageNamed("lang-mustache")
                include jarPackageNamed("compiler")
            }

            from("${->elasticsearchBuildTree}/modules/lang-painless") {
                include jarPackageNamed("lang-painless")
                include jarPackageNamed("antlr4-runtime")
                include jarPackageNamed("asm-util")
                include jarPackageNamed("asm-commons")
                include jarPackageNamed("asm-tree")
                include jarPackageNamed("asm")
                include jarPackageNamed("spi/elasticsearch-scripting-painless-spi")
            }

            into project.file('local_libs')

            includeEmptyDirs(false)
            eachFile { path = name } // flatten
            eachFile { logger.info "copying ${it} to local_libs" }
        }
    }
}
compileJava.dependsOn(importMinimalElasticsearch)
shadowJar.dependsOn(importMinimalElasticsearch)

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task generateGemJarRequiresFile {
    description "Generates a ruby script for runtime-requiring vendored jars"

    File jars_file = file("${projectDir}/lib/logstash/filters/elastic_integration/jar_dependencies.rb")
    outputs.file(jars_file)
    inputs.files(tasks.assemble)

    doLast {
        jars_file.parentFile.mkdirs()
        jars_file.newWriter().withWriter { w ->
            w << "# AUTOGENERATED BY THE GRADLE SCRIPT. DO NOT EDIT.\n\n"
            w << "require \'jar_dependencies\'\n"
            w << "require_jar(\'${project.group}\', \'${project.name}\', \'${project.version}\')\n"
        }
    }
}

test {
    useJUnitPlatform()
}

task generateTestCertificates(type: Exec) {
    description "generates SSL certificates for use in tests"

    def sslTestCertsDir = "${projectDir}/src/test/resources/co/elastic/logstash/filters/elasticintegration/ssl-test-certs"

    workingDir sslTestCertsDir
    commandLine './generate.sh'

    def commonOutputFile = Paths.get("${buildDir}/generateTestCertificates.log")
    file(commonOutputFile.parent).mkdirs()
    def commonOutputStream = Files.newOutputStream(commonOutputFile)

    standardOutput = commonOutputStream
    errorOutput = commonOutputStream

    inputs.file("${sslTestCertsDir}/generate.sh")
    inputs.file("${sslTestCertsDir}/openssl.cnf")

    outputs.dir("${sslTestCertsDir}/generated")
    outputs.file(commonOutputFile)
}
processTestResources.dependsOn(generateTestCertificates)

tasks.withType(Test) {
    // Add Exports to enable tests to run in JDK17
    jvmArgs = [
            "--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
            "--add-opens=java.base/java.lang=ALL-UNNAMED",
            "--add-opens=java.base/java.util=ALL-UNNAMED"
    ]
}

task vendor(dependsOn: shadowJar) {
    description "vendors jar dependencies"
    doLast {
        String vendorPathPrefix = "vendor/jar-dependencies"
        String projectGroupPath = project.group.replaceAll('\\.', '/')
        File projectJarFile = file("${vendorPathPrefix}/${projectGroupPath}/logstash-filter-elastic_integration/${project.version}/logstash-filter-elastic_integration-${project.version}.jar")
        projectJarFile.mkdirs()
        Files.copy(file("$buildDir/libs/${project.name}-${project.version}.jar").toPath(), projectJarFile.toPath(), REPLACE_EXISTING)
    }
}
vendor.dependsOn(shadowJar, generateGemJarRequiresFile)

clean {
    delete "${projectDir}/vendor/"
    delete "${projectDir}/local_libs/"
    delete "${projectDir}/*.gem"
    delete "${projectDir}/lib/logstash/filters/elastic_integration/jar_dependencies.rb"
    delete tasks.generateTestCertificates.outputs
}
